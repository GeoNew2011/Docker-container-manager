#!/usr/bin/python3
from subprocess import run
import os
import sys
import json

if	(sys.platform != "linux"):
	print("Docker only available on Linux")
	exit(1)

if (os.geteuid() != 0):
	print("Docker requires root privileges and this manager too")
	exit(13)

exists = os.path.isfile("/data/data/com.termux/files/usr/etc/dockerManagerConfig.json")
if(not exists):
	os.system("rm -rf /data-data/com.termux/files/usr/etc/dockerManagerConfig.json")
	file = open("/data/data/com.termux/files/usr/etc/dockerManagerConfig.json", "w+")
	conf = {
		"path": "/usr/share/dockerManager",
		"groups": {
			"none": {"ports":[]}
		},
		"servers": {
			#"none": {"ports": [], "group": "none"}
		}
	}
	file.write(json.dumps(conf, sort_keys=True, indent=4))
	file.close()

configFile = open("/data/data/com.termux/files/usr/etc/dockerManagerConfig.json", "r+")
conf = json.loads(configFile.read())
configFile.close()
print("Welcome to Docker container manager V1.0")
print(f"For help type \"help\"")
while(True):
	command = input().split()
	try:
		command[0]
	except IndexError:
		command = [""]
	try:
		arg = command[1]
	except IndexError:
		arg = input()
	match command[0]:

		case "create":
			match arg:

				case "minecraft":
					print("If you type nothing to config it will be set to default.")
					print("all spaces in name will be replased with _")
					name = input("name: ")
					name = name.replace(" ", "_")
					#print("Group is unifying server by similar settings. Default group is none")
					group = "" #input("group: ")
					port = "" #input("port: ")
					link = input("link to minecraft jar: ")
					#run([conf["path"] + "/create", name, conf["path"] + "/setup/minecraft", link, port])
					conf["servers"][name] = {"ports": [(port if port != "" else "25565")], "group": (group if group != "" else "none")}

				case "mindustry":
					print("If you type nothing to config it will be set to default.")
					print("all spaces in name will be replased with _")
					name = input("name: ")
					name = name.replace(" ", "_")
					#print("Group is unifying server by similar settings. Default group is none")
					group = "" #input("group: ")
					port = input("port: ")
					ver = input("mindustry version(without v): ")
					try: int(ver)
					except: print("invalid version")
					else:
						#run(conf["path"] + "/create", name, conf["path"] + "/setup/mindustry", ver, port)
						conf["servers"][name] = {"ports": [(port if port != "" else "6567")], "group": (group if group != "" else "none")}
				case "group":
					name = input("name: ")
					ports = input("ports: ")
					ports = ports.split()
					conf["groups"][name] = {"ports": ports}

				case "help":
					print("To create a group use create group")
					print("available servers: minecraft, mindustry")
					print("name - name of the server")
					print("group - group of the server")
					print("port - port on which server will be available")
					print("minecraft link - link where minecraft jar will be downloaded")
					print("mindustry version - number of mindustry release")

				case _:
					print("type of server not found")

		case "start":
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				args = ""
				for i in conf["servers"][arg]["ports"]:
					args += " -p " + i + ":" + i + " -p " + i + ":" + i + "/udp"
				for i in conf["groups"][conf["servers"][args]["group"]]["ports"]:

				#run(["/usr/bin/docker", "#run", "-itd", "--user", "server", "--name", arg.upper()] + args.split() + [arg, "bash", "-c", f"cd; ./server"])
				print("Launched.")

		case "stop":
			try:
				server = conf["servers"][arg]
			except:
	print("Server not found.")
			else:
				#run(["/usr/bin/docker", "stop", arg.upper()])
				print("Stopped.")

		case "attach":
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				print("Type docker attach " + arg.upper() + " to attach to server console")
				print("To detach press Control-P + Control-Q")

		case "save":
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				#run(["/usr/bin/docker", "commit", arg.upper(), arg])
				print("Done.")

		case "remove":
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				#run(["/usr/bin/docker", "remove", arg.upper()])
				print("Removed.")

		case "delete":
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				#run(["/usr/bin/docker", "rmi", arg.upper()])
				conf["servers"].remove(arg)
				print("Deleted.")

		case "clear":
			#run(["/usr/bin/docker", "p#rune"])
			print("Cleared.")

		case "config":
			match arg:
				case "path":
					path = input("path to directory: ")
					if (os.path.isdir(path)):
						conf["path"] = path
					else: print("Given path does not exists.")
				case "help":
					print("path - path to directory where scripts for creating container placed")

		case "exit":
			configFile = open("/data/data/com.termux/files/usr/etc/dockerManagerConfig.json", "w")
			configFile.write(json.dumps(conf, sort_keys=True, indent=4))
			sys.exit(0)

		case "help":
			print("Use help in command to get available options")
			print("create - create new image")
			print("start - start container from image")
			print("stop - stop container(still can be saved)")
			print("attach - attach to container's console")
			print("save - save container to image")
			print("remove - remove stopped container")
			print("delete - delete image")
			print("clear - delete all stopped container, unused images, networks not used by at least one container")
			print("config - change config of groups, containers, manager")
			print("exit - exit manager")
			print("help - print this message")

		case _:
			print("Unrecognized command. For command list type help")

