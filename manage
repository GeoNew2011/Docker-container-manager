#!/usr/bin/python3
from subprocess import run, DEVNULL
import os
import sys
import json

def getArg():
	try:
		arg = command[1]
	except IndexError:
		arg = input("")
	return arg

if (sys.platform != "linux"):
	print("Docker only available on Linux")
	exit(1)

if (os.geteuid() != 0):
	print("Docker requires root privileges and this manager too")
	exit(13)

exists = os.path.isfile("/etc/dockerManagerConfig.json")
if(not exists):
	os.system("rm -rf /etc/dockerManagerConfig.json")
	file = open("/etc/dockerManagerConfig.json", "w+")
	conf = {
		"path": "/usr/share/dockerManager",
		"bridges": [
			"docker0"
		],
		"servers": {
			#"none": {"ports": [], "bridge": "docker0"}
		}
	}
	file.write(json.dumps(conf, sort_keys=True, indent=4))
	file.close()

configFile = open("/etc/dockerManagerConfig.json", "r+")
conf = json.loads(configFile.read())
configFile.close()

print("Welcome to Docker container manager V1.0")
print(f"For help type \"help\"")
while(True):
	command = input().split()
	try:
		command[0]
	except IndexError:
		command = [""]
	match command[0]:

		case "create":
			match getArg().lower():

				case "minecraft":
					print("If you type nothing to config it will be set to default.")
					print("all spaces in name will be replased with _")
					name = input("name: ")
					name = name.replace(" ", "_")
					print("Bridge is isolating container from other containers")
					bridge = input("bridge: ")
					port = ""#input("port: ")
					link = input("link to minecraft jar: ")
					run([conf["path"] + "/create", name, conf["path"] + "/setup/minecraft", link, port], stdout=DEVNULL)
					conf["servers"][name] = {"ports": [(port if port != ""else "25565")], "bridge": (bridge if bridge != ""else "docker0")}

				case "mindustry":
					print("If you type nothing to config it will be set to default.")
					print("all spaces in name will be replased with _")
					name = input("name: ")
					name = name.replace(" ", "_")
					print("Bridge is isolating container from other containers")
					bridge = input("bridge: ")
					ip = input("ip: ")
					port = input("port: ")
					ver = input("mindustry version(without v): ")
					try:
						if (ver != ""): int(ver)
					except: print("invalid version")
					else:
						run([conf["path"] + "/create", name, conf["path"] + "/setup/mindustry", ver, port], stdout=DEVNULL)
						conf["servers"][name] = {"ports": [(port if port != ""else "6567")], "ip": (None if (bridge == "" and ip != "") else ip), "bridge": (bridge if bridge != ""else "docker0")}
				case "bridge":
					name = input("name: ")
					run(["docker", "network", "create", name], stdout=DEVNULL)
					conf["bridges"] += name

				case "help":
					print("\n ┌───────────────────┬───────────────────────────────────────────────┐")
					print("│ servers           │ Minecraft, Mindustry                          │")
					print("├───────────────────┼───────────────────────────────────────────────┤")
					print("│ name              │ name of the server                            │")
					print("├───────────────────┼───────────────────────────────────────────────┤")
					print("│ bridge            │ bridge to which the server will be connected  │")
					print("├───────────────────┼───────────────────────────────────────────────┤")
					print("│ port              │ port on which server will be available        │")
					print("├───────────────────┼───────────────────────────────────────────────┤")
					print("│ minecraft link    │ link where minecraft jar will be downloaded   │")
					print("├───────────────────┼───────────────────────────────────────────────┤")
					print("│ mindustry version │ number of mindustry release                   │")
					print("└───────────────────┴───────────────────────────────────────────────┘")

				case _:
					print("type of server not found")

		case "start":
			arg = getArg()
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				args = ""
				for i in conf["servers"][arg]["ports"]:
					args += "-p "+ i + ":"+ i + "-p "+ i + ":"+ i + "/udp"
				run(["/usr/bin/docker", "run", "-itd", "--user", "server", "--name", arg.upper(), "--network", conf[arg]["bridge"]] + (["--ip", conf[arg]["ip"]] if conf[arg]["ip"] != None else []) + args.split() + [arg, "bash", "-c", "cd; ./server"], stdout=DEVNULL)
				print("Launched.")

		case "stop":
			arg = getArg()
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				run(["/usr/bin/docker", "stop", arg.upper()], stdout=DEVNULL)
				print("Stopped.")

		case "attach":
			arg = getArg()
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				print("Type docker attach "+ arg.upper() + "to attach to server console")
				print("To detach press Control-P + Control-Q")

		case "save":
			arg = getArg()
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				run(["/usr/bin/docker", "commit", arg.upper(), arg], stdout=DEVNULL)
				print("Done.")

		case "remove":
			arg = getArg()
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				run(["/usr/bin/docker", "remove", arg.upper()], stdout=DEVNULL)
				print("Removed.")

		case "delete":
			arg = getArg()
			try:
				server = conf["servers"][arg]
			except:
				print("Server not found.")
			else:
				run(["/usr/bin/docker", "rmi", arg.upper()], stdout=DEVNULL)
				conf["servers"].remove(arg)
				print("Deleted.")

		case "clear":
			run(["/usr/bin/docker", "system", "prune"], stdout=DEVNULL)
			print("Cleared.")

		case "config":
			match getArg():

				case "path":
					path = input("path to directory: ")
					if (os.path.isdir(path)):
						conf["path"] = path
					else: print("Given path does not exists.")
				case "bridge":
					for br in conf["bridges"]:
						print("br")

				case "help":
								print("\n ┌────────┬─────────────────────┐")
								print("│  path  │ set path to scripts │")
								print("├────────┼─────────────────────┤")
								print("│ bridge │ get list of bridges │")
								print("└────────┴─────────────────────┘")
		case "exit":
			configFile = open("/etc/dockerManagerConfig.json", "w")
			configFile.write(json.dumps(conf, sort_keys=True, indent=4))
			sys.exit(0)

		case "help":
			print("\n Use 'help' in command to get available options")
			print("┌────────┬───────────────────────────────────────────────┐")
			print("│ create │ create new image                              │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│  start │ start container from image                    │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│  stop  │ stop container(still can be saved)            │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│ attach │ attach to container's console                 │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│  save  │ save container to image                       │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│ remove │ remove stopped container                      │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│ delete │ delete image                                  │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│ clear  │ delete all stopped container, unused images,  │")
			print("│        │ networks not used by at least one container   │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│ config │ change config of groups, containers, manager  │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│  exit  │ exit manager                                  │")
			print("├────────┼───────────────────────────────────────────────┤")
			print("│  help  │ print this message                            │")
			print("└────────┴───────────────────────────────────────────────┘")

		case _:
			print("Unrecognized command. For command list type help")
